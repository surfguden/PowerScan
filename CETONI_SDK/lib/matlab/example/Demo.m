%% Cleaning everything

clc
close all
clear all

%% Initialize necessary variables 
hPump1 = int64(0);    % store device handle for pump 1 here
hPump2 = int64(0);    % store device handle for pump 2 here
VolumeMax1 = 0.0; 
VolumeMax2 = 0.0;

% Setting units
LITRES  = 68;

% usable base units
UNIT    =  0; 
DECI    = -1; 
CENTI   = -2; 
MILLI   = -3; 
MICRO   = -6; 

PER_SECOND  = 1; 
PER_MINUTE  = 60; 
PER_HOUR    = 3600;



%% Loading prepared .dll Files

%-- Add paths of ".dll" files and ".h" files to projects search paths
% (relative or explicite paths possible)

% include all *.dll files from installation folder (Typically can be found in "C:\Users\User\AppData\Local\QmixSDK-64bit")
addpath ('LibraryFiles\DLL_Files');      
% include all *.h files from "include" folder  
addpath ('LibraryFiles\H_Files');        

%-- Load labbCAN_Bus_API.dll Functions and create alias for easier handling
loadlibrary('labbCAN_Bus_API','labbCAN_Bus_API.h','alias','BusLib');
% display available functoins in seperate window
libfunctionsview('BusLib');
% list available functoins in console
libfunctions('BusLib');

%-- Load labbCAN_Pump_API.dll Functions and create alias for easier handling
loadlibrary('labbCAN_Pump_API','labbCAN_Pump_API.h','alias','PumpLib');
% display available functoins in of labbCAN_Pump_API.dll in seperate window
libfunctionsview('PumpLib');
% list available functoins in console
libfunctions('PumpLib');

%% Initialization 

%-- Open the bus library
if calllib('BusLib', 'LCB_Open', 'Config2Pumps') < 0    % Config2Pumps is the name of the folder containing the configuratoin ".xml" files generated by QmixElements 
   disp('Opening bus library failed')                   % Folder needs to be in working directory of MATLAB 
   return
end

% Setting devices operational
LCB_StartCheck = calllib('BusLib', 'LCB_Start');
if LCB_StartCheck < 0
    disp('Starting device operation failed')
    return
end

%-- Check availability of pumps
NoOfPumps = calllib('PumpLib','LCP_GetNoOfPumps');
if NoOfPumps <= 0
    disp('No device connected')
    return
end


%-- % Retrieve device handles which are later used to adress each pump respectively 
% get handle of first pump
[res, str, hPump1] = calllib('PumpLib',...
                        'LCP_LookupPumpByName',...
                        'neMESYS_Mid_Pressure_V3_1_Pump',...
                        hPump1);
if res < 0
    disp('Failed to retrieve device Handle of pump 1')                    
    return
end

% get handle of second pump
[res, str, hPump2] = calllib('PumpLib',...
                        'LCP_LookupPumpByName',...
                        'neMESYS_Mid_Pressure_V3_2_Pump',...
                        hPump2);
if res < 0
    disp('Failed to retrieve device Handle of pump 2')                    
    return
end

%% Seting up the pumps

%-- Check for fault states
disp('================================');
disp('Checking for fault states');
disp('');
% Is pump 1 in fault state?
FaultstatePump_1 = calllib('PumpLib','LCP_IsInFaultState', hPump1);

if FaultstatePump_1 == 1
    % Yes, clear fault state
    calllib('PumpLib','LCP_ClearFault',hPump1);
    disp('Fault cleared for pump 1');
    return 
end
    % No, proceed with script

% Is pump 2 in fault state?
FaultstatePump_2 = calllib('PumpLib','LCP_IsInFaultState', hPump2);

if FaultstatePump_2 == 1
    % Yes, clear fault state
    calllib('PumpLib','LCP_ClearFault',hPump2);
    disp('Fault cleared for pump 2');
    return 
end
    % No, proceed with script


%-- Now we enable the pump drive. 
% Enabling the pump means, power will be applied to power stage of the pump drive units
disp('================================');
disp('Enabling pumps');
disp('');
res  = calllib('PumpLib', 'LCP_Enable', hPump1); 
if res < 0
    disp('Failed to enable pump 1')                    
    return
end

res  = calllib('PumpLib', 'LCP_Enable', hPump2); 
if res < 0
    disp('Failed to enable pump 2')                    
    return
end

%-- Setting up pump SI units and parameters 
disp('================================');
disp('Setting up pump parameters');
disp('');
calllib('PumpLib', 'LCP_SetVolumeUnit', hPump1, MILLI, LITRES); 
calllib('PumpLib', 'LCP_SetVolumeUnit', hPump2, MILLI, LITRES);

calllib('PumpLib', 'LCP_SetFlowUnit', hPump1, MILLI, LITRES, PER_SECOND);   
calllib('PumpLib', 'LCP_SetFlowUnit', hPump2, MILLI, LITRES, PER_SECOND);

% Set Syringe parameters
calllib('PumpLib', 'LCP_SetSyringeParam',hPump1, 7, 60);    % inner Diameter, height 
calllib('PumpLib', 'LCP_SetSyringeParam',hPump2, 7, 60);   % inner Diameter, height

%% Operate pumps

%-- Calibration moves
disp('================================');
disp('Calibrating pump1');
disp('');
calllib('PumpLib', 'LCP_SyringePumpCalibrate', hPump1);
while (calllib('PumpLib', 'LCP_IsCalibrationFinished', hPump1) == 0)
end

disp('================================');
disp('Calibrating pump2');
disp('');
calllib('PumpLib', 'LCP_SyringePumpCalibrate', hPump2);
while (calllib('PumpLib', 'LCP_IsCalibrationFinished', hPump2) == 0)
end

% % Read maximal volume available in syringe
[res, VolumeMax1] = calllib('PumpLib', 'LCP_GetVolumeMax', hPump1, VolumeMax1); 
[res, VolumeMax2] = calllib('PumpLib', 'LCP_GetVolumeMax', hPump2, VolumeMax2);

% % Fill volume into syringe with set flow rate
% RetAspirate1 = calllib('PumpLib', 'LCP_Aspirate', hPump1, VolumeMax1, 0.01); 
% RetAspirate2 = calllib('PumpLib', 'LCP_Aspirate', hPump2, VolumeMax2, 0.01);

% % Empty set volume out of syringe with set flow rate
% RetDispense1 = calllib('PumpLib', 'LCP_Dispense', hPump1, 0.05, 0.01); 
% RetDispense2 = calllib('PumpLib', 'LCP_Dispense', hPump2, 0.05, 0.01);

% % Generate a continuous flow stream out of syringe
% RetFlow1 = calllib('PumpLib', 'LCP_GenerateFlow', hPump1, 0.01);
% RetFlow2 = calllib('PumpLib', 'LCP_GenerateFlow', hPump2, 0.01);

% % Fill or empty syringe with set flow so it containes only the set volume of liquid 
% calllib('PumpLib', 'LCP_SetFillLevel', hPump1, 2.3, 0.05);  	
% calllib('PumpLib', 'LCP_SetFillLevel', hPump2, 3.5, 0.3); 

% while (calllib('PumpLib', 'LCP_IsPumping', hPump1) > 0 || calllib('PumpLib', 'LCP_IsPumping', hPump2) > 0)
%     disp('Pumps still working');
% end


%% Disconnect from devices
% 
% % stop all pump movements
% disp('================================');
% disp('Stoping pump movements');
% disp('');
% calllib('PumpLib', 'LCP_StopAllPumps');
% 
% % remove power from pump drives
% disp('================================');
% disp('remove power from pump drives');
% disp('');
% calllib('PumpLib','LCP_Disable', hPump1);
% calllib('PumpLib','LCP_Disable', hPump2);
% 
% % Close communication 
% disp('================================');
% disp('closing communicatoin');
% disp('');
% calllib('BusLib', 'LCB_Stop');
% calllib('BusLib', 'LCB_Close');
% 
% % unload libraries from MATLAB's memory
% disp('================================');
% disp('unloading libraries');
% disp('');
% unloadlibrary('BusLib');
% unloadlibrary('PumpLib');